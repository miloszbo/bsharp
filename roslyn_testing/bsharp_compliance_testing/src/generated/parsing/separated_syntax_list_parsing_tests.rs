// Auto-generated STRUCTURE tests from Roslyn: SeparatedSyntaxListParsingTests
use crate::custom_asserts::structure_assert;
use bsharp_parser::bsharp::parse_csharp_source_strict;
use bsharp_parser::syntax::span::Span;
#[test]
fn type_arguments() {
    let src = r#""#;
    let span = Span::new(src);
    let r = parse_csharp_source_strict(span);
    if let Ok((_rest, unit)) = r {
        let expected = structure_assert::ExpectedTree {
            root: structure_assert::ExpectedNode {
                kind: "CompilationUnit".to_string(),
                token_value: None,
                children: vec![],
            },
        };
        structure_assert::assert_tree(&expected, &unit);
    }
}

#[test]
fn type_arguments_2() {
    let src = r#""#;
    let span = Span::new(src);
    let r = parse_csharp_source_strict(span);
    if let Ok((_rest, unit)) = r {
        let expected = structure_assert::ExpectedTree {
            root: structure_assert::ExpectedNode {
                kind: "CompilationUnit".to_string(),
                token_value: None,
                children: vec![],
            },
        };
        structure_assert::assert_tree(&expected, &unit);
    }
}

#[test]
fn type_arguments_2_with_csharp_6() {
    let src = r#"
class C
{
    new C<>();
    new C<, >();
    C<C<>> a1;
    C<A<>> a1;
    object a1 = typeof(C<C<, >, int>);
    object a2 = Swap<>(1, 1);
}

class M<,> { }
"#;
    let span = Span::new(src);
    let r = parse_csharp_source_strict(span);
    if let Ok((_rest, unit)) = r {
        let expected = structure_assert::ExpectedTree { root: structure_assert::ExpectedNode { kind: "CompilationUnit".to_string(), token_value: None, children: vec![    structure_assert::ExpectedNode { kind: "ClassDeclaration".to_string(), token_value: None, children: vec![        structure_assert::ExpectedNode { kind: "IdentifierName".to_string(), token_value: Some("C".to_string()), children: vec![] },         structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                 structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                                 structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![                                    structure_assert::ExpectedNode { kind: "OmittedArraySizeExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] }] },         structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                 structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                                 structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![                                    structure_assert::ExpectedNode { kind: "NumericLiteralExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] }] },         structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                 structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                                 structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![                                    structure_assert::ExpectedNode { kind: "OmittedArraySizeExpression".to_string(), token_value: None, children: vec![] },                                     structure_assert::ExpectedNode { kind: "OmittedArraySizeExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] }] },         structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                 structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                                 structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![                                    structure_assert::ExpectedNode { kind: "NumericLiteralExpression".to_string(), token_value: None, children: vec![] },                                     structure_assert::ExpectedNode { kind: "NumericLiteralExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] }] },         structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                 structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                                 structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![                                    structure_assert::ExpectedNode { kind: "OmittedArraySizeExpression".to_string(), token_value: None, children: vec![] },                                     structure_assert::ExpectedNode { kind: "OmittedArraySizeExpression".to_string(), token_value: None, children: vec![] },                                     structure_assert::ExpectedNode { kind: "OmittedArraySizeExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] }] },         structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                 structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                                 structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![                                    structure_assert::ExpectedNode { kind: "NumericLiteralExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] }] }] },     structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![        structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },             structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                             structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![] },                             structure_assert::ExpectedNode { kind: "NumericLiteralExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] },     structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![        structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },             structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                             structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "NumericLiteralExpression".to_string(), token_value: None, children: vec![] },                                 structure_assert::ExpectedNode { kind: "NumericLiteralExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] }] }] } };
        structure_assert::assert_tree(&expected, &unit);
    }
}

#[test]
fn array_rank_specifiers() {
    let src = r#"
class C
{
    new C<>();
    new C<, >();
    C<C<>> a1;
    C<A<>> a1;
    object a1 = typeof(C<C<, >, int>);
    object a2 = Swap<>(1, 1);
}

class M<,> { }
"#;
    let span = Span::new(src);
    let r = parse_csharp_source_strict(span);
    if let Ok((_rest, unit)) = r {
        let expected = structure_assert::ExpectedTree { root: structure_assert::ExpectedNode { kind: "CompilationUnit".to_string(), token_value: None, children: vec![    structure_assert::ExpectedNode { kind: "ClassDeclaration".to_string(), token_value: None, children: vec![        structure_assert::ExpectedNode { kind: "IdentifierName".to_string(), token_value: Some("C".to_string()), children: vec![] },         structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                 structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                                 structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![                                    structure_assert::ExpectedNode { kind: "OmittedArraySizeExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] }] },         structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                 structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                                 structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![                                    structure_assert::ExpectedNode { kind: "NumericLiteralExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] }] },         structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                 structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                                 structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![                                    structure_assert::ExpectedNode { kind: "OmittedArraySizeExpression".to_string(), token_value: None, children: vec![] },                                     structure_assert::ExpectedNode { kind: "OmittedArraySizeExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] }] },         structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                 structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                                 structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![                                    structure_assert::ExpectedNode { kind: "NumericLiteralExpression".to_string(), token_value: None, children: vec![] },                                     structure_assert::ExpectedNode { kind: "NumericLiteralExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] }] },         structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                 structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                                 structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![                                    structure_assert::ExpectedNode { kind: "OmittedArraySizeExpression".to_string(), token_value: None, children: vec![] },                                     structure_assert::ExpectedNode { kind: "OmittedArraySizeExpression".to_string(), token_value: None, children: vec![] },                                     structure_assert::ExpectedNode { kind: "OmittedArraySizeExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] }] },         structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                 structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                                 structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![                                    structure_assert::ExpectedNode { kind: "NumericLiteralExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] }] }] },     structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![        structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },             structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                             structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![] },                             structure_assert::ExpectedNode { kind: "NumericLiteralExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] },     structure_assert::ExpectedNode { kind: "FieldDeclaration".to_string(), token_value: None, children: vec![        structure_assert::ExpectedNode { kind: "VariableDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },             structure_assert::ExpectedNode { kind: "VariableDeclarator".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "EqualsValueClause".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "ArrayCreationExpression".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "ArrayType".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] },                             structure_assert::ExpectedNode { kind: "ArrayRankSpecifier".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "NumericLiteralExpression".to_string(), token_value: None, children: vec![] },                                 structure_assert::ExpectedNode { kind: "NumericLiteralExpression".to_string(), token_value: None, children: vec![] }] }] }] }] }] }] }] }] } };
        structure_assert::assert_tree(&expected, &unit);
    }
}
