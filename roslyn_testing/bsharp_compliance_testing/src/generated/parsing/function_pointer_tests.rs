// Auto-generated STRUCTURE tests from Roslyn: FunctionPointerTests
use crate::custom_asserts::structure_assert;
use bsharp_parser::bsharp::parse_csharp_source_strict;
use bsharp_parser::syntax::span::Span;
#[test]
fn method_types() {
    let src = r#"delegate* unmanaged[cdecl]<string, Goo, int> ptr;"#;
    let span = Span::new(src);
    let r = parse_csharp_source_strict(span);
    if let Ok((_rest, unit)) = r {
        let expected = structure_assert::ExpectedTree { root: structure_assert::ExpectedNode { kind: "CompilationUnit".to_string(), token_value: None, children: vec![    structure_assert::ExpectedNode { kind: "ClassDeclaration".to_string(), token_value: None, children: vec![        structure_assert::ExpectedNode { kind: "IdentifierName".to_string(), token_value: Some("C".to_string()), children: vec![] },         structure_assert::ExpectedNode { kind: "MethodDeclaration".to_string(), token_value: None, children: vec![            structure_assert::ExpectedNode { kind: "FunctionPointerType".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "FunctionPointerParameterList".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "FunctionPointerParameter".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] }] },                     structure_assert::ExpectedNode { kind: "FunctionPointerParameter".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] }] }] }] },             structure_assert::ExpectedNode { kind: "ParameterList".to_string(), token_value: None, children: vec![                structure_assert::ExpectedNode { kind: "Parameter".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "FunctionPointerType".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "FunctionPointerParameterList".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "FunctionPointerParameter".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "IdentifierName".to_string(), token_value: Some("C".to_string()), children: vec![] }] },                             structure_assert::ExpectedNode { kind: "FunctionPointerParameter".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "PredefinedType".to_string(), token_value: None, children: vec![] }] }] }] }] },                 structure_assert::ExpectedNode { kind: "Parameter".to_string(), token_value: None, children: vec![                    structure_assert::ExpectedNode { kind: "FunctionPointerType".to_string(), token_value: None, children: vec![                        structure_assert::ExpectedNode { kind: "FunctionPointerCallingConvention".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "FunctionPointerUnmanagedCallingConventionList".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "FunctionPointerUnmanagedCallingConvention".to_string(), token_value: None, children: vec![] }] }] },                         structure_assert::ExpectedNode { kind: "FunctionPointerParameterList".to_string(), token_value: None, children: vec![                            structure_assert::ExpectedNode { kind: "FunctionPointerParameter".to_string(), token_value: None, children: vec![                                structure_assert::ExpectedNode { kind: "IdentifierName".to_string(), token_value: Some("D".to_string()), children: vec![] }] }] }] }] }] },             structure_assert::ExpectedNode { kind: "Block".to_string(), token_value: None, children: vec![] }] }] }] } };
        structure_assert::assert_tree(&expected, &unit);
    }
}
